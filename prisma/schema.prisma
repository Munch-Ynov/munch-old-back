// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  
}

model User {
  id           Int           @id @default(autoincrement())
  firstName    String        @db.VarChar(255)
  lastName     String        @db.VarChar(255)
  email        String        @unique
  password     String
  restaurant   Restaurant?
  admin        Boolean       @default(false)
  favorites    Favorite[]
  reservations Reservation[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Restaurant {
  id           Int           @id @default(autoincrement())
  user         User?         @relation(fields: [userId], references: [id])
  userId       Int?          @unique
  name         String        @db.VarChar(255)
  address      String        @db.VarChar(255)
  description  String        @db.VarChar(255)
  price        Price         @default(MODERATE)
  n_siret      String        @db.VarChar(255)
  phone        String        @db.VarChar(255)
  code_postal  String        @db.VarChar(255)
  city         String        @db.VarChar(255)
  email        String        @db.VarChar(255)
  features     Feature[]
  favorites    Favorite[]
  reservations Reservation[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Favorite {
  id           Int         @id @default(autoincrement())
  user         User        @relation(fields: [userId], references: [id])
  userId       Int
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId Int
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model Reservation {
  id           Int         @id @default(autoincrement())
  user         User        @relation(fields: [userId], references: [id])
  userId       Int
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId Int
  date         DateTime
  nb_people    Int
  status       Status      @default(PENDING)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

enum Status {
  PENDING
  ACCEPTED
  REFUSED
}

enum Price {
  ECO
  MODERATE
  EXPENSIVE
  VERY_EXPENSIVE
}

model Feature {
  id Int @id @default(autoincrement())
  name String @db.VarChar(255)
  icon String? @db.VarChar(255)
  category Category @relation(fields: [categoryId], references: [id])
  restaurants Restaurant[]
  categoryId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id Int  @id @default(autoincrement())
  name String @db.VarChar(255)
  features Feature[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
