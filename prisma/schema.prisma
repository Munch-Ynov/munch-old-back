generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id           Int           @id @default(autoincrement())
  firstName    String        @db.VarChar(255)
  lastName     String        @db.VarChar(255)
  email        String        @unique
  phone        String?       @db.VarChar(255)
  password     String
  admin        Boolean       @default(false)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  restaurant   Restaurant?
  favorites    Favorite[]
  reservations Reservation[]
}

model Restaurant {
  id           Int           @id @default(autoincrement())
  userId       Int?          @unique
  name         String        @db.VarChar(255)
  address      String        @db.VarChar(255)
  description  String        @db.VarChar(255)
  price        Price         @default(MODERATE)
  n_siret      String        @db.VarChar(255)
  phone        String        @db.VarChar(255)
  code_postal  String        @db.VarChar(255)
  city         String        @db.VarChar(255)
  email        String        @db.VarChar(255)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  user         User?         @relation(fields: [userId], references: [id])
  features     Feature[]
  favorites    Favorite[]
  reservations Reservation[]
}

model Favorite {
  id           Int        @id @default(autoincrement())
  userId       Int
  restaurantId Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  user         User       @relation(fields: [userId], references: [id])
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
}

model Reservation {
  id           Int        @id @default(autoincrement())
  userId       Int
  restaurantId Int
  date         DateTime
  nb_people    Int
  status       Status     @default(PENDING)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  user         User       @relation(fields: [userId], references: [id])
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
}

model Feature {
  id          Int          @id @default(autoincrement())
  name        String       @db.VarChar(255)
  icon        String?      @db.VarChar(255)
  categoryId  Int
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  category    Category     @relation(fields: [categoryId], references: [id])
  restaurants Restaurant[]
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @db.VarChar(255)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  features  Feature[]
}

model FeatureToRestaurant {
  A Int
  B Int

  @@unique([A, B], map: "_FeatureToRestaurant_AB_unique")
  @@index([B], map: "_FeatureToRestaurant_B_index")
  @@map("_FeatureToRestaurant")
}

enum Status {
  PENDING
  ACCEPTED
  REFUSED
}

enum Price {
  ECO
  MODERATE
  EXPENSIVE
  VERY_EXPENSIVE
}
